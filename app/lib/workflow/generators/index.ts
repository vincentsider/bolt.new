import type { Workflow } from '~/types/database';
import { generatePackageJson } from './package-generator';
import { generateWorkflowServer } from './server-generator';
import { generateDatabaseSchema } from './database-generator';
import { generateWorkflowEngine } from './engine-generator';
import { generateNotificationService } from './notification-generator';
import { generateWorkflowUI, generateWorkflowCSS } from './ui-generator';
import { generateWorkflowApp } from './app-generator';

export interface WorkflowFiles {
  [path: string]: string;
}

export async function generateWorkflowApplication(workflow: Workflow, organizationId?: string): Promise<WorkflowFiles> {
  console.log('üéØ Generating workflow with component library integration...');
  
  const files: WorkflowFiles = {
    // Root files
    'package.json': generatePackageJson(workflow),
    'server.js': generateWorkflowServer(workflow),
    '.gitignore': generateGitignore(),
    'README.md': generateReadme(workflow),
    '.env.example': generateEnvExample(),
    
    // Library files
    'lib/database.js': generateDatabaseSchema(workflow),
    'lib/workflow-engine.js': generateWorkflowEngine(workflow),
    'lib/notifications.js': generateNotificationService(),
    
    // Public files - üéØ NOW USES COMPONENT LIBRARY
    'public/index.html': await generateWorkflowUI(workflow, organizationId),
    'public/style.css': generateWorkflowCSS(),
    'public/app.js': generateWorkflowApp(),
    
    // Uploads directory
    'uploads/.gitkeep': ''
  };
  
  console.log('‚úÖ Workflow application generated with standardized components');
  return files;
}

function generateGitignore(): string {
  return `# Dependencies
node_modules/

# Environment
.env
.env.local

# Database
*.db
*.sqlite

# Uploads
uploads/*
!uploads/.gitkeep

# Logs
*.log
npm-debug.log*

# OS
.DS_Store
Thumbs.db

# IDE
.vscode/
.idea/
*.swp
*.swo`;
}

function generateReadme(workflow: Workflow): string {
  return `# ${workflow.name || 'Workflow Application'}

${workflow.description || 'A workflow application generated by WorkflowHub.'}

## üöÄ Quick Start

### Local Development

1. Install dependencies:
\`\`\`bash
npm install
\`\`\`

2. Copy environment variables:
\`\`\`bash
cp .env.example .env
\`\`\`

3. Configure your email settings in \`.env\` (optional but recommended)

4. Start the server:
\`\`\`bash
npm run dev
\`\`\`

5. Open http://localhost:3000 in your browser

## üìã Features

- ‚úÖ Form submission with validation
- ‚úÖ File upload support
- ‚úÖ Email notifications
- ‚úÖ Approval workflow
- ‚úÖ Status tracking
- ‚úÖ Submission history
- ‚úÖ SQLite database
- ‚úÖ Audit logging

## üîß Configuration

### Environment Variables

Create a \`.env\` file with the following variables:

\`\`\`env
# Server
PORT=3000

# Email Configuration (Optional)
EMAIL_HOST=smtp.gmail.com
EMAIL_PORT=587
EMAIL_USER=your-email@gmail.com
EMAIL_PASS=your-app-password
EMAIL_FROM="WorkflowHub" <noreply@workflowhub.com>

# Notifications
NOTIFY_APPROVERS=true
APPROVER_EMAILS=manager@company.com,admin@company.com
ERROR_NOTIFICATION_EMAIL=admin@company.com
\`\`\`

## üì¶ Deployment

This workflow can be deployed to any Node.js hosting platform:

### Heroku
\`\`\`bash
heroku create your-workflow-name
git push heroku main
\`\`\`

### Railway
\`\`\`bash
railway login
railway link
railway up
\`\`\`

### Vercel
\`\`\`bash
vercel
\`\`\`

### Docker
\`\`\`dockerfile
FROM node:18-alpine
WORKDIR /app
COPY package*.json ./
RUN npm ci --only=production
COPY . .
EXPOSE 3000
CMD ["npm", "start"]
\`\`\`

## üìä Database

The application uses SQLite for data storage. The database file is created automatically at \`workflow.db\`.

### Database Schema

- **submissions**: Main table for workflow submissions
- **files**: Uploaded file references
- **audit_log**: Complete audit trail

## üîí Security

- Input validation on all forms
- File upload restrictions
- SQL injection prevention
- XSS protection
- CORS enabled

## üìù API Endpoints

- \`POST /api/workflow/submit\` - Submit new workflow
- \`GET /api/workflow/:id\` - Get submission status
- \`POST /api/workflow/:id/approve\` - Approve/reject submission
- \`GET /api/submissions\` - List all submissions

## ü§ù Contributing

Feel free to customize this workflow for your needs!

## üìÑ License

MIT - Generated by WorkflowHub`;
}

function generateEnvExample(): string {
  return `# Server Configuration
PORT=3000
NODE_ENV=development

# Email Configuration (Required for notifications)
EMAIL_HOST=smtp.gmail.com
EMAIL_PORT=587
EMAIL_USER=your-email@gmail.com
EMAIL_PASS=your-app-password
EMAIL_FROM="WorkflowHub" <noreply@workflowhub.com>

# Notification Settings
NOTIFY_APPROVERS=true
APPROVER_EMAILS=manager@company.com,admin@company.com
ERROR_NOTIFICATION_EMAIL=admin@company.com

# Database (Optional - defaults to SQLite)
DATABASE_URL=

# Security (Generate your own in production)
SESSION_SECRET=your-secret-key-here

# External Integrations (Optional)
# SLACK_WEBHOOK_URL=
# TWILIO_ACCOUNT_SID=
# TWILIO_AUTH_TOKEN=
# TWILIO_PHONE_NUMBER=`;
}

// Export all generators for individual use
export * from './server-generator';
export * from './database-generator';
export * from './engine-generator';
export * from './ui-generator';
export * from './app-generator';
export * from './package-generator';
export * from './notification-generator';